function Card(b,a){this.suit=b;this.order=a;switch(a){case 1:this.name="A";this.value=14;break;case 2:this.name="2";this.value=2;break;case 3:this.name="3";this.value=3;break;case 4:this.name="4";this.value=4;break;case 5:this.name="5";this.value=5;break;case 6:this.name="6";this.value=6;break;case 7:this.name="7";this.value=7;break;case 8:this.name="8";this.value=8;break;case 9:this.name="9";this.value=9;break;case 10:this.name="10";this.value=10;break;case 11:this.name="J";this.value=11;break;case 12:this.name="Q";this.value=12;break;case 13:this.name="K";this.value=13;break}}function Deck(){this.cards=new Array();this.shuffled=new Array();for(var b=0;b<52;b++){if(b<13){var c="Diamonds"}else{if(b<26){c="Clubs"}else{if(b<39){c="Hearts"}else{c="Spades"}}}var d=(b%13)+1;this.cards.push(new Card(c,d))}while(this.cards.length>0){var a=parseInt(Math.random()*this.cards.length);this.shuffled.push(this.cards[a]);this.cards.splice(a,1)}}Deck.prototype.nextCard=function(){return this.shuffled.pop()};function Game(b){var a=true;while(true){this.num=prompt("How many Players (2 - 9)?",b);if(this.num==parseInt(this.num,10)&&this.num>1&&this.num<10){numPlayers=this.num;break}else{if(this.num==null){a=false;break}}}if(a){this.deck=new Deck();this.players=new Array();while(this.num>0){this.players.push(new Player());this.num--}this.deal();alert("Click to see Player 1");for(var c=0;c<this.players.length;c++){this.players[c].process(this.deck,(c+1))}this.flop=new Flop();this.populateFlop();this.showFlop();this.flop.addCard(this.deck.nextCard());this.showFlop();this.flop.addCard(this.deck.nextCard());this.showFlop();this.reportStandings();this.reportResults()}}Game.prototype.populateFlop=function(){this.flop.addCard(this.deck.nextCard());this.flop.addCard(this.deck.nextCard());this.flop.addCard(this.deck.nextCard())};Game.prototype.showFlop=function(){alert(this.flop.reportHand())};Game.prototype.deal=function(){for(var a=0;a<2;a++){for(var b=0;b<this.players.length;b++){this.players[b].addCard(this.deck.nextCard())}}};Game.prototype.reportStandings=function(){var c="";for(var b=0;b<this.players.length;b++){this.players[b].evaluateHand(this.flop)}for(var a=1;a<10;a++){for(var b=0;b<this.players.length;b++){if(this.players[b].value==a){c+="Player "+(b+1)+": "+this.players[b].convertValue()+"\n"}}}alert(c)};Game.prototype.reportResults=function(){var b="";for(var a=0;a<this.players.length;a++){b=this.players[a].getResults(this.flop,a+1);alert(b)}};var numPlayers=2;function playGame(b){var a=new Game(b)}function Player(){this.hand=new Array();this.sortedHandValues=new Array();this.flushSuit="";this.value=0;this.topCard=0;this.straightHighCard=0;this.threesCard=0;this.pairCard=0;this.secondPairCard=0;this.fullOfCard=0}Player.prototype.addCard=function(a){this.hand.push(a)};Player.prototype.getCard=function(a){return this.hand[a]};Player.prototype.convertValue=function(){var a="undefined";switch(this.value){case 1:a="Straight Flush - "+decodeValue(this.topCard);break;case 2:a="Four of a Kind - "+decodeValue(this.topCard);break;case 3:a="Full House - "+decodeValue(this.threesCard)+"  "+decodeValue(this.fullOfCard);break;case 4:a="Flush - "+decodeValue(this.topCard);break;case 5:a="Straight - "+decodeValue(this.straightHighCard);break;case 6:a="Three of a Kind - "+decodeValue(this.threesCard);break;case 7:a="Two Pair - "+decodeValue(this.pairCard)+"  "+decodeValue(this.secondPairCard);break;case 8:a="One Pair - "+decodeValue(this.pairCard);break;case 9:a="High Card - "+decodeValue(this.topCard);break;default:a="Other"}return a};Player.prototype.reportHand=function(){s="";for(var a=0;a<this.hand.length;a++){s+=this.hand[a].name+unicodeSuit(this.hand[a].suit)+"  "}return s};Player.prototype.process=function(a,b){s="Player "+b+":\n"+this.reportHand();alert(s);alert("Click to see next Player or flop")};Player.prototype.evaluateHand=function(a){tempHand=new Array();tempHand[0]=this.getCard(0);tempHand[1]=this.getCard(1);tempHand[2]=a.getCard(0);tempHand[3]=a.getCard(1);tempHand[4]=a.getCard(2);tempHand[5]=a.getCard(3);tempHand[6]=a.getCard(4);this.sortedHandValues=getSortedHandValues(tempHand);this.flushSuit=hasFlush(tempHand);this.straightHighCard=hasStraight(this.sortedHandValues);if(this.flushSuit!=""&&this.straightHighCard>0){this.topCard=hasStrightFlush(tempHand,this.flushSuit);if(this.topCard>0){this.value=1;return}}this.threesCard=hasThreeOfAKind(this.sortedHandValues);if(this.threesCard>0&&this.flushSuit==""&&this.straightHighCard==0){this.foursCard=hasFourOfAKind(this.sortedHandValues);if(this.foursCard>0){this.value=2;return}this.fullOfCard=hasFullHouse(this.sortedHandValues,this.threesCard);if(this.fullOfCard>0){this.value=3;return}}if(this.flushSuit!=""){this.topCard=getFlushHigh(tempHand,this.flushSuit);this.value=4;return}else{if(this.straightHighCard>0){this.value=5;return}else{if(this.threesCard>0){this.value=6;return}}}this.pairCard=hasPair(this.sortedHandValues);if(this.pairCard>0){this.secondPairCard=hasTwoPair(this.sortedHandValues,this.pairCard);if(this.secondPairCard>0){this.value=7;return}else{this.value=8;return}}this.topCard=this.sortedHandValues[0];this.value=9};Player.prototype.getResults=function(b,a){s="Player "+a+":\n"+this.reportHand()+"\n\n"+b.reportHand();return s};function Flop(){this.hand=new Array()}Flop.prototype.addCard=function(a){this.hand.push(a)};Flop.prototype.getCard=function(a){return this.hand[a]};Flop.prototype.reportHand=function(){s="";for(var a=0;a<this.hand.length;a++){s+=this.hand[a].name+unicodeSuit(this.hand[a].suit)+"  "}return s};function GameOmaha(b){var a=true;while(true){this.num=prompt("How many Players (2 - 9)?",b);if(this.num==parseInt(this.num,10)&&this.num>1&&this.num<10){numPlayers=this.num;break}else{if(this.num==null){a=false;break}}}if(a){this.deck=new Deck();this.players=new Array();while(this.num>0){this.players.push(new PlayerOmaha());this.num--}this.deal();alert("Click to see Player 1");for(var c=0;c<this.players.length;c++){this.players[c].process(c+1)}this.flop=new FlopOmaha();this.populateFlop();this.showFlop();this.flop.addCard(this.deck.nextCard());this.showFlop();this.flop.addCard(this.deck.nextCard());this.showFlop();this.reportStandings();this.reportResults()}}GameOmaha.prototype.populateFlop=function(){this.flop.addCard(this.deck.nextCard());this.flop.addCard(this.deck.nextCard());this.flop.addCard(this.deck.nextCard())};GameOmaha.prototype.showFlop=function(){alert(this.flop.reportHand())};GameOmaha.prototype.deal=function(){for(var a=0;a<4;a++){for(var b=0;b<this.players.length;b++){this.players[b].addCard(this.deck.nextCard())}}};GameOmaha.prototype.reportStandings=function(){var c="";this.flop.analyze();for(var b=0;b<this.players.length;b++){this.players[b].evaluateHand(this.flop)}for(var a=1;a<10;a++){for(var b=0;b<this.players.length;b++){if(this.players[b].value==a){c+="Player "+(b+1)+": "+this.players[b].convertValue()+"\n"}}}alert(c)};GameOmaha.prototype.reportResults=function(){var b="";for(var a=0;a<this.players.length;a++){b=this.players[a].getResults(this.flop,a+1);alert(b)}};var numPlayers=2;function playOmaha(b){var a=new GameOmaha(b)}function PlayerOmaha(){this.hand=new Array();this.sortedValues=new Array();this.flushSuit="";this.value=0;this.topCard=0;this.threesCard=0;this.pairCard=0;this.secondPairCard=0;this.fullOfCard=0;this.possibleFlushSuits=new Array();this.pairValues=new Array();this.alsoInFlop=new Array();this.foursOne=0;this.foursTwo=0;this.threes=new Array();this.pairs=new Array();this.comboPairs=new Array();this.possStraights=new Array();this.uniqueValues=new Array();this.straightCombos=new Array()}PlayerOmaha.prototype.addCard=function(a){this.hand.push(a)};PlayerOmaha.prototype.getCard=function(a){return this.hand[a]};PlayerOmaha.prototype.convertValue=function(){var a="undefined";switch(this.value){case 1:a="Straight Flush - "+decodeValue(this.topCard);break;case 2:a="Four of a Kind - "+decodeValue(this.topCard);break;case 3:a="Full House - "+decodeValue(this.topCard)+"  "+decodeValue(this.fullOfCard);break;case 4:a="Flush - "+decodeValue(this.topCard);break;case 5:a="Straight - "+decodeValue(this.topCard);break;case 6:a="Three of a Kind - "+decodeValue(this.threesCard);break;case 7:a="Two Pair - "+decodeValue(this.pairCard)+"  "+decodeValue(this.secondPairCard);break;case 8:a="One Pair - "+decodeValue(this.pairCard);break;case 9:a="High Card - "+decodeValue(this.topCard);break;default:a="Other"}return a};PlayerOmaha.prototype.reportHand=function(){s="";for(var a=0;a<this.hand.length;a++){s+=this.hand[a].name+unicodeSuit(this.hand[a].suit)+"  "}return s};PlayerOmaha.prototype.process=function(a){s="PlayerOmaha "+a+":\n"+this.reportHand();alert(s);alert("Click to see next PlayerOmaha or flop")};PlayerOmaha.prototype.evaluateHand=function(a){this.sortedValues=getSortedHandValues(this.hand);this.possibleFlushSuits=getPossibleFlushSuits(this.hand);if(a.flushSuit!=""){this.flushSuit=hasMatchingSuits(this.possibleFlushSuits,a.flushSuit)}if(this.flushSuit!=""){this.topCard=getStraightFlush(this.hand,a.hand,this.flushSuit);if(this.topCard!=0){this.value=1;return}}this.pairValues=getPairValues(this.sortedValues);if(a.threeOfaKind!=0){this.foursOne=hasMatch(this.sortedValues,a.threeOfaKind)}fours=commonValues(this.pairValues,a.pairValues);if(fours.length>0){if(this.foursOne==0){this.foursOne=fours[0]}else{this.foursTwo=fours[0]}}if(fours.length==2){this.foursTwo=fours[1]}if(this.foursOne!=0){this.value=2;if(this.foursTwo!=0){if(this.foursOne>this.foursTwo){this.topCard=this.foursOne}else{this.topCard=this.foursTwo}}else{this.topCard=this.foursOne}return}if(a.threeOfaKind!=0){this.threes[0]=a.threeOfaKind}for(i=0;i<a.pairValues.length;i++){if(contains(this.sortedValues,a.pairValues[i])){this.threes[this.threes.length]=a.pairValues[i]}}for(i=0;i<this.pairValues.length;i++){if(contains(a.sortedFlopValues,this.pairValues[i])){this.threes[this.threes.length]=this.pairValues[i]}}this.threes.sort(function(d,c){return c-d});for(i=0;i<this.pairValues.length;i++){if(!contains(a.sortedFlopValues,this.pairValues[i])){this.pairs[this.pairs.length]=this.pairValues[i]}}for(i=0;i<a.pairValues.length;i++){if(!contains(this.sortedValues,a.pairValues[i])){this.pairs[this.pairs.length]=a.pairValues[i]}}for(i=0;i<4;i++){if(contains(a.sortedFlopValues,this.sortedValues[i])){if(!contains(a.pairValues,this.sortedValues[i])&&!contains(this.pairValues,this.sortedValues[i])){this.pairs[this.pairs.length]=this.sortedValues[i];this.comboPairs[this.comboPairs.length]=this.sortedValues[i]}}}this.pairs.sort(function(d,c){return c-d});this.comboPairs.sort(function(d,c){return c-d});if(this.threes.length==3){this.value=3;this.topCard=this.threes[0];if(!(contains(this.pairValues,this.threes[0])&&contains(this.pairValues,this.threes[1]))){this.fullOfCard=this.threes[1]}else{this.fullOfCard=this.threes[2]}return}if(this.threes.length==2){if(contains(this.pairValues,this.threes[0])&&contains(this.pairValues,this.threes[1])){if(this.pairs.length==1){this.topCard=this.threes[0];this.fullOfCard=this.pairs[0];this.value=3;return}}if(!contains(this.sortedValues,this.threes[0])){if(this.pairs.length==1&&this.pairs[0]>this.threes[1]){if(contains(this.pairValues,this.pairs[0])){this.value=3;this.topCard=this.threes[0];this.fullOfCard=this.pairs[0];return}else{if(numContains(this.sortedValues,this.threes[1])==2){this.value=3;this.topCard=this.threes[0];this.fullOfCard=this.threes[1];return}}}}if(!contains(this.pairValues,this.threes[0])||!contains(this.pairValues,this.threes[1])){this.topCard=this.threes[0];this.value=3;if(!contains(this.pairValues,this.threes[0])){if(this.pairs.length==1&&this.pairs[0]>this.threes[1]){this.fullOfCard=this.pairs[0]}else{this.fullOfCard=this.threes[1]}return}else{if(this.pairs.length==1&&this.pairs[0]>this.threes[1]&&!contains(this.sortedValues,this.pairs[0])){this.fullOfCard=this.pairs[0]}else{this.fullOfCard=this.threes[1]}return}}}if(this.threes.length==1&&this.pairs.length>0){if(!contains(this.sortedValues,this.threes[0])){if(this.pairValues.length>0){this.topCard=this.threes[0];this.fullOfCard=this.pairValues[0];this.value=3;return}}else{if(numContains(a.sortedFlopValues,this.threes[0])==2){if(this.comboPairs.length>0){this.topCard=this.threes[0];this.fullOfCard=this.comboPairs[0];this.value=3;return}}else{if(a.pairValues.length>0){this.topCard=this.threes[0];this.fullOfCard=a.pairValues[0];this.value=3;return}}}}if(this.flushSuit!=""){this.value=4;this.topCard=getFlushHigh(createTempHand(this.hand,a.hand),this.flushSuit);return}this.uniqueValues=getUniqueValues(this.sortedValues);if(this.uniqueValues[0]==14){this.uniqueValues[this.uniqueValues.length]=1}this.possStraights=getPossStraights(this.uniqueValues);this.topCard=getHighestStraight(this.possStraights,a.sortedFlopValues);if(this.topCard>0){this.value=5;return}if(this.threes.length>0){this.value=6;this.threesCard=this.threes[0];return}if(this.pairs.length>1){twoPairValues=getTwoPairValues(this.pairs,this.pairValues,a.pairValues,this.comboPairs);if(twoPairValues.length==2){this.value=7;this.pairCard=twoPairValues[0];this.secondPairCard=twoPairValues[1];return}}if(this.pairs.length>0){this.value=8;this.pairCard=this.pairs[0];return}this.value=9;if(a.sortedFlopValues[0]>this.sortedValues[0]){this.topCard=a.sortedFlopValues[0]}else{this.topCard=this.sortedValues[0]}};PlayerOmaha.prototype.getResults=function(b,a){s="PlayerOmaha "+a+":\n"+this.reportHand()+"\n\n"+b.reportHand();return s};function FlopOmaha(){this.hand=new Array();this.flushSuit="";this.sortedFlopValues=new Array();this.threeOfaKind=0;this.pairValues=new Array()}FlopOmaha.prototype.addCard=function(a){this.hand.push(a)};FlopOmaha.prototype.getCard=function(a){return this.hand[a]};FlopOmaha.prototype.analyze=function(){this.sortedFlopValues=getSortedHandValues(this.hand);this.flushSuit=getFlushSuit(this.hand);this.threeOfaKind=hasThreeOfAKind(this.sortedFlopValues);this.pairValues=getPairValuesOther(this.sortedFlopValues,this.threeOfaKind)};FlopOmaha.prototype.reportHand=function(){s="";for(var a=0;a<this.hand.length;a++){s+=this.hand[a].name+unicodeSuit(this.hand[a].suit)+"  "}return s};function unicodeSuit(a){switch(a){case"Spades":s="\u2660";break;case"Clubs":s="\u2663";break;case"Diamonds":s="\u2666";break;case"Hearts":s="\u2665";break;default:s="Other"}return s}function decodeValue(a){switch(a){case 14:s="A";break;case 13:s="K";break;case 12:s="Q";break;case 11:s="J";break;default:s=a}return s}function hasTwoPair(a,b){remainingCards=new Array();j=0;for(i=0;i<a.length;i++){if(a[i]!=b){remainingCards[j]=a[i];j++}}return hasPair(remainingCards)}function getFlushHigh(a,b){flushHigh=0;for(i=0;i<a.length;i++){if(a[i].suit==b){if(a[i].value>flushHigh){flushHigh=a[i].value}}}return flushHigh}function hasFullHouse(b,a){remainingCards=new Array();j=0;for(i=0;i<b.length;i++){if(b[i]!=a){remainingCards[j]=b[i];j++}}return hasPair(remainingCards)}function hasFourOfAKind(a){remaining=new Array();for(j=0;j<a.length-3;j++){test=a[j];matches=0;k=0;for(i=j+1;i<a.length;i++){if(a[i]==test){matches++;if(matches==3){return test}}else{remaining[k]=a[i];k++}}}test=remaining[0];for(i=1;i<remaining.length;i++){if(remaining[i]!=test){}return 0}if(i==4){return test}return 0}function hasStraightFlush(a,b){hand=new Array();j=0;for(i=0;i<a.length;i++){if(a[i].suit==b){hand[j]=a[i].value;j++}}hand.sort(function(d,c){return c-d});for(i=0;i<hand.length-4;i++){if(hand[i]-hand[i+4]==4){return hand[i]}}if(hand[0]==14&&hand[hand.length-1]==2&&hand[hand.length-4]==5){return 5}return 0}function getUnpairedValues(a){unpairedValues=new Array();unpairedValues[0]=a[0];prev=0;j=1;for(i=1;i<a.length;i++){if(a[i]!=a[prev]){unpairedValues[j]=a[i];j++}prev++}return unpairedValues}function hasStraight(a){unpairedValues=getUnpairedValues(a);return hasStraightFromUnpaired(unpairedValues)}function hasStraightFromUnpaired(a){numCards=a.length;if(numCards<5){return 0}for(j=0;j<(numCards-4);j++){if((a[j]-a[j+4])==4){return a[j]}}if(a[0]==14&&a[numCards-1]==2&&a[numCards-4]==5){return 5}return 0}function getSortedHandValues(a){sortedHand=new Array();for(i=0;i<a.length;i++){sortedHand[i]=a[i].value}sortedHand.sort(function(d,c){return c-d});return sortedHand}function hasThreeOfAKind(a){for(j=0;j<(a.length-2);j++){test=a[j];matches=0;for(i=j+1;i<a.length;i++){if(a[i]==test){matches++;if(matches==2){return test}}}}return 0}function hasPair(a){for(j=0;j<(a.length-1);j++){test=a[j];for(i=j+1;i<a.length;i++){if(a[i]==test){return test}}}return 0}function hasFlush(a){diamonds=0;clubs=0;hearts=0;spades=0;for(i=0;i<a.length;i++){if(a[i].suit=="Diamonds"){diamonds++}else{if(a[i].suit=="Clubs"){clubs++}else{if(a[i].suit=="Spades"){spades++}else{if(a[i].suit=="Hearts"){hearts++}}}}}if(diamonds>=5){return"Diamonds"}else{if(clubs>=5){return"Clubs"}else{if(spades>=5){return"Spades"}else{if(hearts>=5){return"Hearts"}}}}return""}function getPairValuesOther(b,a){pairs=new Array();test=hasPairOther(b,a);if(test!=0){pairs[0]=test;if(a==0){test=hasPairOther(b,pairs[0]);if(test!=0){pairs[1]=test}}}return pairs}function getPairValues(a){pairs=new Array();test=hasPair(a);if(test!=0){pairs[0]=test;test=hasPairOther(a,pairs[0]);if(test!=0){pairs[1]=test}}return pairs}function getTwoPairValues(c,e,d,a){twoPairValues=new Array();for(var b=0;b<c.length-1;b++){if((contains(e,c[b])||contains(e,c[b+1]))&&(contains(d,c[b])||contains(d,c[b+1]))){twoPairValues[0]=c[b];twoPairValues[1]=c[b+1];return twoPairValues}else{if(contains(a,c[b])&&contains(a,c[b+1])){twoPairValues[0]=c[b];twoPairValues[1]=c[b+1];return twoPairValues}else{if((contains(a,c[b])||contains(a,c[b+1]))&&(contains(d,c[b])||contains(d,c[b+1]))){twoPairValues[0]=c[b];twoPairValues[1]=c[b+1];return twoPairValues}}}}if(c.length==3){for(b=1;b<c.length-1;b++){if((contains(e,c[b])||contains(e,c[b+1]))&&(contains(d,c[b])||contains(d,c[b+1]))){twoPairValues[0]=c[b];twoPairValues[1]=c[b+1];return twoPairValues}else{if(contains(a,c[b])&&contains(a,c[b+1])){twoPairValues[0]=c[b];twoPairValues[1]=c[b+1];return twoPairValues}else{if((contains(a,c[b])||contains(a,c[b+1]))&&(contains(d,c[b])||contains(d,c[b+1]))){twoPairValues[0]=c[b];twoPairValues[1]=c[b+1];return twoPairValues}}}}}if(c.length==4){for(b=1;b<c.length-1;b++){if((contains(e,c[b])||contains(e,c[b+1]))&&(contains(d,c[b])||contains(d,c[b+1]))){twoPairValues[0]=c[b];twoPairValues[1]=c[b+1];return twoPairValues}else{if(contains(a,c[b])&&contains(a,c[b+1])){twoPairValues[0]=c[b];twoPairValues[1]=c[b+1];return twoPairValues}else{if((contains(a,c[b])||contains(a,c[b+1]))&&(contains(d,c[b])||contains(d,c[b+1]))){twoPairValues[0]=c[b];twoPairValues[1]=c[b+1];return twoPairValues}}}}}return twoPairValues}function hasPairOther(a,d){for(var b=0;b<(a.length-1);b++){test=a[b];for(var c=b+1;c<a.length;c++){if(a[c]==test&&test!=d){return test}}}return 0}function getUniqueValues(b){ret=new Array();index=0;ret[index]=b[0];for(var a=1;a<b.length;a++){if(b[a]!=b[a-1]){index++;ret[index]=b[a]}}return ret}function getUniqueSorted(a,c){ret=new Array();index=0;for(var b=0;b<a.length;b++){ret[index++]=a[b]}for(b=0;b<c.length;b++){ret[index++]=c[b]}ret.sort(function(e,d){return d-e});return getUniqueValues(ret)}function straightContains(c,b){for(var a=0;a<c.length;a++){if(Math.abs(c[a]-b)>4){return false}}return true}function getHighestStraight(b,c){ret=0;for(var a=0;a<b.length;a++){uniqueValues=getUniqueSorted(b[a],c);if(uniqueValues.length>4){ret=hasStraightFromUnpaired(uniqueValues);if(ret!=0){if(straightContains(b[a],ret)){return ret}}}}return ret}function getPossStraights(c){index=0;ret=new Array();for(var b=0;b<(c.length-1);b++){for(var a=1+b;a<c.length;a++){if(c[b]-c[a]<5){ret[index]=new Array();ret[index][0]=c[b];ret[index][1]=c[a];index++}}}return ret}function contains(c,b){for(var a=0;a<c.length;a++){if(c[a]==b){return true}}return false}function numContains(c,b){num=0;for(var a=0;a<c.length;a++){if(c[a]==b){num++}}return num}function hasMatchingSuits(c,b){for(var a=0;a<c.length;a++){if(c[a]==b){return b}}return""}function getStraightFlush(a,e,d){suitCards=new Array();handValues=new Array();var b=0;for(var c=0;c<a.length;c++){if(a[c].suit==d){handValues[b]=a[c].value;suitCards[b++]=a[c].value}}for(var c=0;c<e.length;c++){if(e[c].suit==d){suitCards[b++]=e[c].value}}suitCards.sort(function(g,f){return f-g});highStraight=hasStraightFromUnpaired(suitCards);if(highStraight==0){return 0}if(suitCards.length==5){return highStraight}handValues.sort(function(g,f){return f-g});while(suitCards.length>4){numFromHand=0;for(var c=0;c<handValues.length;c++){if(handValues[c]<=highStraight&&handValues[c]>=(highStraight-4)){numFromHand++}}if(highStraight==5&&handValues[0]==14){numFromHand++}if(numFromHand==2){return highStraight}if(suitCards.length>5){temp=new Array();for(c=1;c<suitCards.length;c++){temp[c-1]=suitCards[c]}if(suitCards[0]==14){temp[c-1]=1}suitCards=temp}highStraight=hasStraightFromUnpaired(suitCards);if(highStraight==0){return 0}}return 0}function createTempHand(c,a){cards=new Array();numCards=c.length;for(var b=0;b<numCards;b++){cards[b]=c[b]}for(b=numCards;b<numCards+a.length;b++){cards[b]=a[b-numCards]}return cards}function getFlushSuit(b){diamonds=0;clubs=0;spades=0;hearts=0;for(var a=0;a<b.length;a++){if(b[a].suit=="Diamonds"){diamonds++}else{if(b[a].suit=="Clubs"){clubs++}else{if(b[a].suit=="Spades"){spades++}else{if(b[a].suit=="Hearts"){hearts++}}}}}if(diamonds>2){return"Diamonds"}if(clubs>2){return"Clubs"}if(hearts>2){return"Hearts"}if(spades>2){return"Spades"}return""}function getPossibleFlushSuits(b){suits=new Array();diamonds=0;clubs=0;spades=0;hearts=0;for(var a=0;a<b.length;a++){if(b[a].suit=="Diamonds"){diamonds++}else{if(b[a].suit=="Clubs"){clubs++}else{if(b[a].suit=="Spades"){spades++}else{if(b[a].suit=="Hearts"){hearts++}}}}}if(diamonds>1){suits[suits.length]="Diamonds"}if(clubs>1){suits[suits.length]="Clubs"}if(hearts>1){suits[suits.length]="Hearts"}if(spades>1){suits[suits.length]="Spades"}return suits}function hasMatch(a,b){for(var c=0;c<a.length;c++){if(a[c]==b){return b}}return 0}function commonValues(e,d){ret=new Array();var a=0;for(var c=0;c<e.length;c++){for(var b=0;b<d.length;b++){if(e[c]==d[b]){ret[a]=e[c];a++;break}}}return ret};